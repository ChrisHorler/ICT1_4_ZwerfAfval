@using BlazorBootstrap
@using BlazorBootstrap.Components
@using Frontend_Dashboard.Components.Models
@using Frontend_Dashboard.Components.Services
@using Microsoft.AspNetCore.Components
@inject IAnalyticsDataService AnalyticsDataService
@inject DateService dateService

<div class="analytics-layout">
    <LineChart @ref="lineChart" Width="800" Height="400" />
</div>

@if (Data != null && Data.Any())
{
    <p>data currently loaded</p>
}
else
{
    <p>No data currently loaded</p>
}

@code {
    [Parameter]
    public List<LineGraphDto> Data { get; set; } = new();

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private readonly string[] defaultColors = new[]
    {
        "rgba(255, 99, 132, 0.5)",
        "rgba(54, 162, 235, 0.5)",
        "rgba(255, 206, 86, 0.5)",
        "rgba(75, 192, 192, 0.5)",
        "rgba(153, 102, 255, 0.5)",
        "rgba(255, 159, 64, 0.5)"
    };

    // Processes the data and prepares it for graph
    public void LoadDataIntoGraph()
    {
        if (Data != null && Data.Any())
        {
            // Create a dictionary to count how many detections happened per day
            var dayCounts = new Dictionary<string, int>();

            foreach (var item in Data)
            {
                var day = item.TimeStamp.Date.ToString("yyyy-MM-dd");

                if (dayCounts.ContainsKey(day))
                {
                    dayCounts[day]++;
                }
                else
                {
                    dayCounts[day] = 1;
                }
            }

            // Log the count results to the console cause im cool
            foreach (var kvp in dayCounts)
            {
                Console.WriteLine($"{kvp.Key}: {kvp.Value} items");
            }

            // Chart labels = days
            var labels = dayCounts.Keys.OrderBy(d => d).ToList();

            // Build one dataset showing the number of detections per day
            var dataset = new LineChartDataset
                {
                    Label = "Detections per day",
                    Data = labels.Select(day => (double?)dayCounts[day]).ToList(),
                    BackgroundColor = defaultColors[0],
                    BorderColor = "#333",
                    BorderWidth = 2,
                    PointRadius = Enumerable.Repeat(4.0, labels.Count).ToList(),
                    PointHoverRadius = Enumerable.Repeat(6.0, labels.Count).ToList()
                };

            // Final chart data with labels and dataset
            chartData = new ChartData
                {
                    Labels = labels,
                    Datasets = new List<IChartDataset> { dataset }
                };
        }
        else
        {
            chartData = new ChartData
                {
                    Labels = new List<string>(),
                    Datasets = new List<IChartDataset>()
                };
        }

        lineChartOptions = new LineChartOptions
            {
                IndexAxis = "x",
                Interaction = new Interaction
                {
                    Mode = InteractionMode.Index,
                    Intersect = false
                },
                Responsive = true
            };
    }

    // Initializes the chart with data
    protected override void OnInitialized()
    {
        this.LoadDataIntoGraph();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
