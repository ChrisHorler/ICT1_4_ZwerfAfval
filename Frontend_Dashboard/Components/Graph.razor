@using BlazorBootstrap
@using BlazorBootstrap.Components
@using Frontend_Dashboard.Components.Models
@using Frontend_Dashboard.Components.Services
@using Microsoft.AspNetCore.Components
@inject IAnalyticsDataService AnalyticsDataService
@inject DateService dateService


<div class="analytics-layout">
    <LineChart @ref="lineChart" Width="800" Height="400" />
</div>

@if (Data != null && Data.Any())
{
    <p> data currently loaded</p>
}
else
{
    <p>No data currently loaded</p>
}


@code {
    [Parameter]
    public List<LineGraphDto> Data { get; set; } = new();

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private readonly string[] defaultColors = new[]
       {
        "rgba(255, 99, 132, 0.5)",
        "rgba(54, 162, 235, 0.5)",
        "rgba(255, 206, 86, 0.5)",
        "rgba(75, 192, 192, 0.5)",
        "rgba(153, 102, 255, 0.5)",
        "rgba(255, 159, 64, 0.5)"
    };

    public void LoadDataIntoGraph()
    {
        if (Data != null && Data.Any())
        {
            foreach (var item in Data)
            {
                Console.WriteLine($"name: {item.name}, category: {item.category}, timestamp: {item.TimeStamp}");
            }
            // Get trash types
            var types = Data
                .Where(d => d.TrashTypeCounts != null)
                .SelectMany(d => d.TrashTypeCounts.Keys)
                .Distinct()
                .ToList();

            // Group by timestamp 
            var groupedByTime = Data
                .GroupBy(d => d.TimeStamp)
                .OrderBy(g => g.Key)
                .ToList();

            // Use timestamps as X-axis names
            var labels = groupedByTime
                .Select(g => g.Key.ToString("yyyy-MM-dd HH:mm"))
                .ToList();

            // Build datasets per trash type
            var datasets = types.Select((type, index) => new LineChartDataset
                {
                    Label = type,
                    Data = groupedByTime.Select(g =>
                        g.SelectMany(d => d.TrashTypeCounts)
                         .Where(kvp => kvp.Key == type)
                         .Sum(kvp => kvp.Value)
                    ).Cast<double?>().ToList(),

                    BackgroundColor = defaultColors[index % defaultColors.Length],
                    BorderColor = "#333",
                    BorderWidth = 2,
                    PointRadius = Enumerable.Repeat(4.0, labels.Count).ToList(),
                    PointHoverRadius = Enumerable.Repeat(6.0, labels.Count).ToList()
                }).Cast<IChartDataset>().ToList();

            chartData = new ChartData
                {
                    Labels = labels,
                    Datasets = datasets
                };
        }
        else
        {
            chartData = new ChartData
                {
                    Labels = new List<string>(),
                    Datasets = new List<IChartDataset>()
                };
        }

        lineChartOptions = new LineChartOptions
            {
                IndexAxis = "x",
                Interaction = new Interaction
                {
                    Mode = InteractionMode.Index,
                    Intersect = false
                },
                Responsive = true
            };
    }

    protected override void OnInitialized()
    {
        this.LoadDataIntoGraph();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}