@using BlazorBootstrap
@using BlazorBootstrap.Components
@using Frontend_Dashboard.Components.Models
@using Microsoft.AspNetCore.Components

<div class="analytics-layout">
    <LineChart @ref="lineChart" Width="800" Height="400" />
</div>

<!-- <p>Labels: @string.Join(", ", chartData?.Labels ?? new())</p>
<p>Datasets: @chartData?.Datasets?.Count</p>
<pre>@System.Text.Json.JsonSerializer.Serialize(GetDebugChartData(), new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre> -->
@if (Data != null && Data.Any())
{
    <ul>
        @foreach (var item in Data)
        {
            <li>@item.Type - @item.Confidence</li>
        }
    </ul>
}
else
{
    <p>No data available..</p>
}


@code {
    [Parameter]
    public List<DetectionData> Data { get; set; } = new();

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    protected override void OnInitialized()
    {
        if (Data != null && Data.Any())
        {
            var grouped = Data
                .GroupBy(d => d.Type)
                .Select(g => new
                {
                    Type = g.Key,
                    Count = g.Count()
                })
                .ToList();

            chartData = new ChartData
                {
                    Labels = grouped.Select(g => g.Type).ToList(),
                    Datasets = new List<IChartDataset>
                {
                    new LineChartDataset
                    {
                        Label = "Amount per type",
                        Data = grouped.Select(g => (double?)g.Count).ToList(),
                        BackgroundColor = "rgba(75, 192, 192, 0.2)",
                        BorderColor = "rgb(75, 192, 192)",
                        BorderWidth = 2,
                        PointRadius = grouped.Select(g => 5.0).ToList(),
                        PointHoverRadius = grouped.Select(g => 8.0).ToList()
                    }
                }
                };
        }
        else
        {
            chartData = new ChartData
                {
                    Labels = new List<string>(),
                    Datasets = new List<IChartDataset>()
                };
        }

        lineChartOptions = new LineChartOptions
            {
                IndexAxis = "x",
                Interaction = new Interaction
                {
                    Mode = InteractionMode.Index,
                    Intersect = false
                },
                Responsive = true
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}