@page "/waste-calendar"
@rendermode InteractiveServer
@inject CalendarService calendarService

<div class="dashboard-layout">

    <!-- CALENDAR ------------------------------------------------------------>
    <div class="calendar-container">

        <!-- Header: month & nav buttons -->
        <div class="calendar-header">
            <button class="calendar-nav-button left"  @onclick="GoToPreviousMonth">←</button>
            <span   class="month-label">@currentMonth.ToString("MMMM yyyy")</span>
            <button class="calendar-nav-button right" @onclick="GoToNextMonth">→</button>
        </div>

        <!-- Week-day labels -->
        <div class="calendar-weekdays">
            <div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div>
            <div>Fri</div><div>Sat</div><div>Sun</div>
        </div>

        <!-- Day grid -->
        <div class="calendar-grid">
            @foreach (var day in CalendarDays)
            {
                <div class="calendar-cell">
                    @if (day.HasValue)
                    {
                        var date       = new DateOnly(currentMonth.Year, currentMonth.Month, day.Value);
                        var prediction = GetTrashLevel(date);      // "high" | "medium" | "low" | null
                        var badgeClass = prediction switch
                        {
                            "high"   => "red",
                            "medium" => "yellow",
                            "low"    => "green",
                            _        => null
                        };

                        <div class="day-number @(IsToday(day.Value) ? "today" : "")">@day</div>

                        @if (badgeClass is not null)
                        {
                            <span class="badge @badgeClass">@day</span>
                        }
                    }
                </div>
            }
        </div>

        <!-- Legend -->
        <div class="calendar-legend">
            <div class="legend-item"><span class="legend-color red"></span>    High amount of trash</div>
            <div class="legend-item"><span class="legend-color yellow"></span> Medium amount of trash</div>
            <div class="legend-item"><span class="legend-color green"></span>  Low amount of trash</div>
        </div>
    </div>

    <!-- INFO PANEL (placeholder) ------------------------------------------->
    <div class="info-panel">
        <div class="info-item"><span class="icon">📍</span><p>Where the most trash is found:<br><strong>McDonalds Breda Centrum</strong></p></div>
        <div class="info-item"><span class="icon">🗑️</span><p>Estimated amount of trash in Breda:<br><strong>420</strong></p></div>
        <div class="info-item"><span class="icon">🧺</span><p>The most common trash type in Breda:<br><strong>Cigarette booties</strong></p></div>
    </div>

</div>

<!-- Bottom-right temperature widget -->
<div class="temperature-box">Today's temperature: 28 °C</div>

@code
{
    /* ---------------------------------------------------------------------
       Date helpers
    --------------------------------------------------------------------- */
    // First day of the current month (no "with" syntax so it compiles everywhere)
    private DateTime currentMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);

    private int DaysInMonth    => DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
    private int StartDayOffset => ((int)new DateTime(currentMonth.Year, currentMonth.Month, 1).DayOfWeek + 6) % 7; // Monday=0

    private List<int?> CalendarDays => Enumerable
        .Repeat<int?>(null, StartDayOffset)
        .Concat(Enumerable.Range(1, DaysInMonth).Cast<int?>())
        .ToList();

    /* ---------------------------------------------------------------------
       Prediction cache
    --------------------------------------------------------------------- */
    private readonly Dictionary<DateOnly, string> _trashPredictions = new();

    protected override async Task OnInitializedAsync() => await LoadPredictions();

    private async Task LoadPredictions()
    {
        var result = await calendarService.GetPredictionsForMonthAsync(currentMonth.Year, currentMonth.Month);
        _trashPredictions.Clear();
        foreach (var kvp in result)
            _trashPredictions[kvp.Key] = kvp.Value;

        StateHasChanged(); // refresh UI
    }

    /* ---------------------------------------------------------------------
       Navigation
    --------------------------------------------------------------------- */
    private async Task GoToPreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        await LoadPredictions();
    }

    private async Task GoToNextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        await LoadPredictions();
    }

    /* ---------------------------------------------------------------------
       Helpers
    --------------------------------------------------------------------- */
    private bool IsToday(int day)
    {
        var today = DateTime.Today;
        return today.Year == currentMonth.Year &&
               today.Month == currentMonth.Month &&
               today.Day == day;
    }

    private string? GetTrashLevel(DateOnly date) =>
        _trashPredictions.TryGetValue(date, out var level) ? level : null;
}
