@page "/waste-calendar"
@using Frontend_Dashboard.Components.Models
@using Frontend_Dashboard.Components.Services
@rendermode InteractiveServer

@inject CalendarService  calendarService
@inject FunFactsService  funFactsService
@inject IWebHostEnvironment env

<div class="dashboard-layout">

    <!-- CALENDAR --------------------------------------------------------- -->
    <div class="calendar-container">
        <div class="calendar-header">
            <button class="calendar-nav-button left"  @onclick="GoToPreviousMonth">‚Üê</button>
            <span   class="month-label">@currentMonth.ToString("MMMM yyyy")</span>
            <button class="calendar-nav-button right" @onclick="GoToNextMonth">‚Üí</button>
        </div>

        <div class="calendar-weekdays">
            <div>Mon</div><div>Tue</div><div>Wed</div><div>Thu</div>
            <div>Fri</div><div>Sat</div><div>Sun</div>
        </div>

        <div class="calendar-grid">
            @foreach (var day in CalendarDays)
            {
                <div class="calendar-cell @(IsSelected(day) ? "selected" : "")"
                     @onclick="() => OnDayClicked(day)">
                    @if (day.HasValue)
                    {
                        var date       = new DateOnly(currentMonth.Year, currentMonth.Month, day.Value);
                        var prediction = GetTrashLevel(date);
                        var badgeClass = prediction switch
                        {
                            "high"   => "red",
                            "medium" => "yellow",
                            "low"    => "green",
                            _        => null
                        };

                        <div class="day-number @(IsToday(day.Value) ? "today" : "")">@day</div>

                        @if (badgeClass is not null)
                        {
                            <span class="badge @badgeClass">@day</span>
                        }
                    }
                </div>
            }
        </div>

        <!-- Legend -->
        <div class="calendar-legend">
            <div class="legend-item"><span class="legend-color red"></span>    High amount of trash</div>
            <div class="legend-item"><span class="legend-color yellow"></span> Medium amount of trash</div>
            <div class="legend-item"><span class="legend-color green"></span>  Low amount of trash</div>
        </div>

        @if (env.IsDevelopment())
        {
            <button class="btn btn-sm" style="margin-top:1rem"
                    @onclick="ClearCacheAndReload">
                üîÑ Clear cache & reload
            </button>
        }
    </div>

    <!-- INFO PANEL -------------------------------------------------------- -->
    <div class="info-panel">
        @if (funFacts is null)
        {
            <p>Select a day to see fun facts.</p>
        }
        else
        {
            <div class="info-item">
                <span class="icon">üóëÔ∏è</span>
                <p>Total detections:<br><strong>@funFacts.TotalDetections</strong></p>
            </div>
            <div class="info-item">
                <span class="icon">üß∫</span>
                <p>Most common trash type:<br><strong>@funFacts.MostCommonTrash</strong></p>
            </div>
        }
    </div>
</div>

<div class="temperature-box">Today's temperature: 28 ¬∞C</div>

@code {
    /* month helpers ----------------------------------------------------- */
    private DateTime currentMonth = new(DateTime.Today.Year, DateTime.Today.Month, 1);

    private int DaysInMonth    => DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
    private int StartDayOffset => ((int)new DateTime(currentMonth.Year, currentMonth.Month, 1).DayOfWeek + 6) % 7;

    private List<int?> CalendarDays => Enumerable
        .Repeat<int?>(null, StartDayOffset)
        .Concat(Enumerable.Range(1, DaysInMonth).Cast<int?>())
        .ToList();

    /* state ------------------------------------------------------------- */
    private readonly Dictionary<DateOnly,string> _trashPredictions = new();
    private DateOnly?    selectedDate;
    private FunFactsDto? funFacts;

    /* lifecycle --------------------------------------------------------- */
    protected override async Task OnInitializedAsync() => await LoadPredictions();

    private async Task LoadPredictions()
    {
        var fresh = await calendarService.GetPredictionsForMonthAsync(currentMonth.Year, currentMonth.Month);
        _trashPredictions.Clear();
        foreach (var kv in fresh) _trashPredictions[kv.Key] = kv.Value;
        StateHasChanged();
    }

    /* navigation -------------------------------------------------------- */
    private async Task GoToPreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        selectedDate = null;
        funFacts     = null;
        await LoadPredictions();
    }

    private async Task GoToNextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        selectedDate = null;
        funFacts     = null;
        await LoadPredictions();
    }

    /* click / fun-facts -------------------------------------------------- */
    private async Task OnDayClicked(int? maybeDay)
    {
        if (maybeDay is null) return;

        selectedDate = new DateOnly(currentMonth.Year, currentMonth.Month, maybeDay.Value);
        funFacts     = await funFactsService.GetFactsAsync(selectedDate.Value);
        StateHasChanged();
    }

    /* helpers ----------------------------------------------------------- */
    private bool IsToday(int d) =>
        DateTime.Today.Year  == currentMonth.Year &&
        DateTime.Today.Month == currentMonth.Month &&
        DateTime.Today.Day   == d;

    private bool IsSelected(int? d) =>
        selectedDate.HasValue && d.HasValue &&
        selectedDate.Value.Year  == currentMonth.Year  &&
        selectedDate.Value.Month == currentMonth.Month &&
        selectedDate.Value.Day   == d.Value;

    private string? GetTrashLevel(DateOnly date) =>
        _trashPredictions.TryGetValue(date, out var lvl) ? lvl : null;

    /* dev helper -------------------------------------------------------- */
    private async Task ClearCacheAndReload()
    {
        calendarService.ClearCache();
        await LoadPredictions();
    }
}
