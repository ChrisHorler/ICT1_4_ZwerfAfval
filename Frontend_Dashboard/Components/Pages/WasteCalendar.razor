@page "/waste-calendar"
@rendermode InteractiveServer
@inject CalendarService calendarService

<div class="dashboard-layout">

    <!-- LEFT: Calendar -->
    <div class="calendar-container">
        <div class="calendar-header">
            <button class="calendar-nav-button left" @onclick="GoToPreviousMonth">‚Üê</button>
            <span class="month-label">@currentMonth.ToString("MMMM yyyy")</span>
            <button class="calendar-nav-button right" @onclick="GoToNextMonth">‚Üí</button>
        </div>

        <div class="calendar-weekdays">
            <div>Mon</div>
            <div>Tue</div>
            <div>Wed</div>
            <div>Thu</div>
            <div>Fri</div>
            <div>Sat</div>
            <div>Sun</div>
        </div>
        
        <div class="calendar-grid">
            @foreach (var day in CalendarDays)
            {
                <div class="calendar-cell">
                    @if (day.HasValue)
                    {
                        var date = new DateOnly(currentMonth.Year, currentMonth.Month, day.Value);
                        var prediction = GetTrashLevelBadge(date);

                        <div class="day-number @(IsToday(day.Value) ? "today" : "")">@day</div>

                        @if (!string.IsNullOrEmpty(prediction))
                        {
                            <span class="badge @prediction">@day</span>
                        }
                    }
                </div>
            }
        </div>

        <!-- Legend -->
        <div class="calendar-legend">
            <div class="legend-item">
                <span class="legend-color red"></span>
                High amount of trash
            </div>
            <div class="legend-item">
                <span class="legend-color yellow"></span>
                Medium amount of trash
            </div>
            <div class="legend-item">
                <span class="legend-color green"></span>
                Low amount of trash
            </div>
        </div>
    </div>

    <!-- RIGHT: Info box -->
    <div class="info-panel">
        <div class="info-item">
            <span class="icon">üìç</span>
            <p>Where the most trash is found:<br><strong>McDonalds Breda Centrum</strong></p>
        </div>

        <div class="info-item">
            <span class="icon">üóëÔ∏è</span>
            <p>Estimated amount of trash in Breda:<br><strong>420</strong></p>
        </div>

        <div class="info-item">
            <span class="icon">üß∫</span>
            <p>The most common trash type in Breda:<br><strong>Cigarette booties</strong></p>
        </div>
    </div>
</div>

<!-- Bottom right -->
<div class="temperature-box">
    Today's temperature: 28¬∞C
</div>

@code {
    private DateTime currentMonth = new DateTime(2025, 6, 1);

    private int DaysInMonth => DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
    private int StartDayOffset =>
        ((int)new DateTime(currentMonth.Year, currentMonth.Month, 1).DayOfWeek + 6) % 7;

    private List<int?> CalendarDays => Enumerable
        .Repeat<int?>(null, StartDayOffset)
        .Concat(Enumerable.Range(1, DaysInMonth).Cast<int?>())
        .ToList();

    private async void GoToPreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        await LoadPredictions();
    }

    private async void GoToNextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        await LoadPredictions();
    }

    private bool IsToday(int day)
    {
        var today = DateTime.Today;
        return today.Day == day &&
               today.Month == currentMonth.Month &&
               today.Year == currentMonth.Year;
    }

    private Dictionary<DateOnly, string> _trashPredictions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPredictions();
    }

    private async Task LoadPredictions()
    {
        _trashPredictions = await calendarService.GetPredictionsForMonthAsync(currentMonth.Year, currentMonth.Month);
        StateHasChanged();
    }

    private string? GetTrashLevelBadge(DateOnly date)
    {
        return _trashPredictions.TryGetValue(date, out var result) ? result : null;
    }
}
