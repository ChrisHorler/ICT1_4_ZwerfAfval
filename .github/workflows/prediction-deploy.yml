name: Build & Deploy Prediction API

on:
  push:
    paths:
      - 'trash_prediction_api/**'
      - '.github/workflows/prediction-deploy.yml'
    branches: [ main ]
  workflow_dispatch: 
    
env:
  IMAGE_ROOT: ghcr.io/${{ github.repository }}/predictionapi
  CONTAINER_NAME: predictionapi
  INTERNAL_PORT: 8000
  HOST_PORT: 8000
    
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Normalize Image Name
        run: |
          echo "IMAGE_NAME=$(echo '${{ env.IMAGE_ROOT }}' | tr 'A-Z' 'a-z')" >> $GITHUB_ENV
      
      - name: Checkout Repo
        uses: actions/checkout@v4
        
      - name: Log-in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build & Push Prediction API image
        uses: docker/build-push-action@v5
        with:
          context: ./trash_prediction_api
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
      
      - name: Deploy on VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD}}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -euo pipefail

            echo '${{ secrets.GHCR_PAT }}' | docker login ghcr.io -u '${{ github.repository_owner }}' --password-stdin
            IMAGE='${{ env.IMAGE_NAME }}:${{ github.sha }}'
            echo "â¬‡ Pulling $IMAGE"
            docker pull "$IMAGE"

            if ! docker network inspect backend-network >/dev/null 2>&1; then
              echo "ðŸ›  Creating backend-networkâ€¦"
              docker network create backend-network
            fi

            echo "Stopping old container (if any)â€¦"
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            echo "Starting new containerâ€¦"
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --network backend-network \
              -p 8000:8000 \
              --restart unless-stopped \
              "$IMAGE"

            echo "Cleaning up imagesâ€¦"
            docker image prune -f || true