name: Build & Deploy Dashboard (Self-signed HTTPS)

on:
  push:
    paths:
      - 'Zwerfafval_WebApp/**'
      - 'nginx/conf.d/dashboard.conf'
      - '.github/workflows/dashboard-deploy.yml'
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  
env: 
  IMAGE_ROOT: ghcr.io/${{ github.repository }}/dashboard
  CONTAINER_NAME: dashboard
  INTERNAL_PORT: 80
  
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Normalize Image Name
        run: |
          echo "IMAGE_NAME=$(echo '${{ env.IMAGE_ROOT }}' | tr 'A-Z' 'a-z')" >> $GITHUB_ENV
        
      - name: Checkout Repo
        uses: actions/checkout@v4
        
      - name: Log-in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build & Push Dashboard Image
        uses: docker/build-push-action@v5
        with:
          context: Zwerfafval_WebApp
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
            
      
      - name: SSH To VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -euo pipefail
            echo '${{ secrets.GHCR_PAT }}' | docker login ghcr.io -u '${{ github.repository_owner }}' --password-stdin
            IMAGE='${{ env.IMAGE_NAME }}:${{ github.sha }}'
            
            docker network create backend-network 2>/dev/null || true
            docker pull "$IMAGE"
            docker stop    ${{ env.CONTAINER_NAME }} || true
            docker rm      ${{ env.CONTAINER_NAME }} || true
            docker run -d \
              --name  ${{ env.CONTAINER_NAME }} \
              --network backend-network \
              --restart unless-stopped \
              "$IMAGE"
            
            mkdir -p /opt/nginx/conf/conf.d /opt/nginx/ssl
            cat > /opt/nginx/conf/conf.d/dashboard.conf <<'CONF'
                      $(sed ':a;N;$!ba;s/\n/\\n/g' nginx/conf.d/dashboard.conf)
            CONF
            
            # --- Create self-signed cert if missing ---
            if [ ! -f /opt/nginx/ssl/selfsigned.crt ]; then
            openssl req -x509 -nodes -days 3650 \
              -newkey rsa:2048 \
              -keyout /opt/nginx/ssl/selfsigned.key \
              -out   /opt/nginx/ssl/selfsigned.crt \
              -subj "/CN=$(hostname -I | awk '{print $1}')"
            fi
            
            if ! docker ps --format '{{.Names}}' | grep -q '^nginx$'; then
            docker run -d \
              --name nginx \
              --network backend-network \
              -p 80:80 -p 443:443 \
              -v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \
              -v /opt/nginx/conf/conf.d:/etc/nginx/conf.d:ro \
              -v /opt/nginx/ssl:/etc/nginx/ssl:ro \
              nginx:alpine
            else
            docker exec nginx nginx -s reload
            fi
            
            docker image prune -f || true