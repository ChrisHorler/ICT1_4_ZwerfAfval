@using System.Globalization
@*@inject IWasteCalendarService WasteCalendarService*@
@using Zwerfafval_WebApp.Components.Models
@using System.Collections.Generic
@using Zwerfafval_WebApp.Components.Services
@inject DateService DateService
@implements IDisposable

<DateInput TValue="DateOnly" Value="DateService.SelectedDate" ValueExpression="() => DateService.SelectedDate" ValueChanged="(value) => DateChanged(value)" />

@code {
    // private Dictionary<DateTime, WasteDetectionData> DetectionData = new(); for API Data

    private int currentYear;
    private int currentMonth;
    //private int nextMonth = DateTime.Today.Month == 12 ? 1 : DateTime.Today.Month + 1;
    private int FirstDayOffset => DaysInMonth.Count == 0 ? 0 : ((int)DaysInMonth[0].DayOfWeek + 6) % 7;
    //Implement choosing the month (and year)
    private readonly string[] DayNames = new[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
    private readonly CultureInfo englishCulture = new CultureInfo("en-GB");

    private List<int> DetectionCounts = new();
    private async void DateChanged(DateOnly dateOnly)
    {
        DateService.SelectedDate = dateOnly;
    }

    protected override void OnInitialized()
    {
        UpdateFromDate(DateService.SelectedDate);

        DateService.OnDateChanged += HandleDateChanged;
        var random = new Random();
        DetectionCounts = Enumerable.Range(1, 30)
    .Select(_ => random.Next(1, 51)) //numbers from 1 to 51
    .ToList();

    @*var data = await Http.GetFromJsonAsync<List<WasteDetectionData>>("https://your-api.com/wastecalendar");
if (data != null)
{
    DetectionData = data
        .Where(d => d.Date.Month == currentMonth && d.Date.Year == currentYear)
        .ToDictionary(d => d.Date.Date, d => d);
}
Code for Data
*@

    }

    private void HandleDateChanged()
    {
        InvokeAsync(() =>
        {
            UpdateFromDate(DateService.SelectedDate);
            StateHasChanged();
        });
    }

    private void UpdateFromDate(DateOnly date)
    {
        currentYear = date.Year;
        currentMonth = date.Month;

        var daysInMonth = DateTime.DaysInMonth(currentYear, currentMonth);

        var random = new Random();
        DetectionCounts = Enumerable.Range(1, daysInMonth)
        .Select(_ => random.Next(1, 51))
        .ToList();
    }

    public void Dispose()
    {
        DateService.OnDateChanged -= HandleDateChanged;
    }

    private List<DateTime> DaysInMonth => Enumerable.Range(1, DateTime.DaysInMonth(currentYear, currentMonth))
        .Select(day => new DateTime(currentYear, currentMonth, day))
        .ToList();

    private string GetColorForDay(DateTime day)
    {
        int index = day.Day - 1;
        if (index >= DetectionCounts.Count)
        {
            return "lightgray";
        }

        int value = DetectionCounts[index];

        if (value <= 15)
        {
            return "#5a9f6e";
        }

        else if (value <= 30)
        {
            return "#fac059";
        }

        else
        {
            return "#f37453";
        }

           
        // for data from API
    //     private string GetColorForDay(DateTime day)
    // {
    //     if (!DetectionData.TryGetValue(day.Date, out var data))
    //         return "lightgray"; Geen data voor deze dag

    //     return data.Category.ToLowerInvariant() switch
    //     {
    //         "low" => "#5a9f6e",
    //         "medium" => "#fac059",
    //         "high" => "#f37453",
    //         _ => "lightgray"
    //     };
    // }

    }
}

<h4>@englishCulture.DateTimeFormat.GetMonthName(currentMonth) @currentYear</h4>

<div class="calendar-weekdays">
    @foreach (var dayName in DayNames)
    {
        <div>@dayName</div>
    }
</div>


<div class="calendar-grid">
    @for (int i = 0; i < FirstDayOffset; i++)
    {
        <div class="calendar-day empty"></div>
    }
    @foreach (var day in DaysInMonth)
    {
        <div class="calendar-day" style="background-color:@GetColorForDay(day)">
            <div>@day.Day</div>
        </div>
    }
</div>

<div class="calendar-legend" style="margin-top: 1rem;">
    <strong>Legenda:</strong>
    <div style="display: flex; gap: 1rem; margin-top: 0.5rem;">
        <div style="display: flex; align-items: center;">
            <div style="width: 20px; height: 20px; background-color: #5a9f6e; border: 1px solid #ccc; margin-right: 0.5rem;"></div>
            <span>Low detection of trash</span>
        </div>
        <div style="display: flex; align-items: center;">
            <div style="width: 20px; height: 20px; background-color: #fac059; border: 1px solid #ccc; margin-right: 0.5rem;"></div>
            <span>Medium detection of trash</span>
        </div>
        <div style="display: flex; align-items: center;">
            <div style="width: 20px; height: 20px; background-color: #f37453; border: 1px solid #ccc; margin-right: 0.5rem;"></div>
            <span>High detection of trash</span>
        </div>
    </div>
</div>
