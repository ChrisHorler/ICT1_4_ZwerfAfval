@inherits LayoutComponentBase
@inject DateService DateService
@using System.Globalization

<div class="page">
    <main>
        <div class="top-row px-4" style="display: flex; align-items: center; gap: 16px;">
            <a href="">Zwerfafval_WebApp</a>
            <label>Day:</label>
            <select Value="SelectedDay" @onchange="OnDayChanged">
                @foreach (var day in Enumerable.Range(1, DateTime.DaysInMonth(SelectedYear, SelectedMonth)))
                {
                    <option value="@day">@day</option>
                }
            </select>

            <label>Month:</label>
            <select Value="SelectedMonth" @onchange="OnMonthChanged">
                @for (int month = 1; month <= 12; month++)
                {
                    <option value="@month">@CultureInfo.GetCultureInfo("en-GB").DateTimeFormat.GetMonthName(month)</option>
                }
            </select>


            <label>Year:</label>
            <select Value="SelectedYear" @onchange="OnYearChanged">
                @for (int year = StartYear; year <= EndYear; year++)
                {
                    <option value="@year">@year</option>
                }
            </select>
            <a href="overview">Overview</a>
            <a href="analytics">Analytics</a>
            <a href="settings">Settings</a>
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private int SelectedDay;
    private int SelectedMonth;
    private int SelectedYear;

    private int StartYear = 2020;
    private int EndYear = DateTime.Today.Year + 1;

    protected override void OnInitialized()
    {
        // Initialize dropdown values from the DateService
        var date = DateService.AnalyticsDate;
        SelectedDay = date.Day;
        SelectedMonth = date.Month;
        SelectedYear = date.Year;
    }

    // Called when the day dropdown is changed
    private void OnDayChanged(ChangeEventArgs e)
    {
        SelectedDay = int.Parse(e.Value?.ToString() ?? "1");
        UpdateDateService();
    }


    // Called when the month dropdown is changed
    private void OnMonthChanged(ChangeEventArgs e)
    {
        SelectedMonth = int.Parse(e.Value?.ToString() ?? "1");

        int maxDays = DateTime.DaysInMonth(SelectedYear, SelectedMonth);
        if (SelectedDay > maxDays)
            SelectedDay = maxDays;

        UpdateDateService();
    }


    // Called when the year dropdown is changed
    private void OnYearChanged(ChangeEventArgs e)
    {
        SelectedYear = int.Parse(e.Value?.ToString() ?? "2020");

        int maxDays = DateTime.DaysInMonth(SelectedYear, SelectedMonth);
        if (SelectedDay > maxDays)
            SelectedDay = maxDays;

        UpdateDateService();
    }


    // Updates the shared date in the DateService
    private void UpdateDateService()
    {
        DateService.AnalyticsDate = new DateTime(SelectedYear, SelectedMonth, SelectedDay);
    }
}